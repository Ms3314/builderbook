
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id     String    @id @default(cuid())
  email  String    @unique 
  username String  @unique
  clerkId  String  @unique 
  name      String?
  bio      String?
  image    String?
  location  String?
  website   String?
  createdAt DateTime @default(now())   // member since 2020 
  updatedAt  DateTime   @updatedAt

  // Relations 

  posts  Post[]   // One to many 
  comments Comment[]
  likes   Like[]

  followers  Follows[]   @relation("following") // this will contain all the userid who follow this guy 
  following  Follows[]  @relation("follower") // this will contain the userif of all the user this person follows

  notifications  Notification[]  @relation("userNotifications")// recieved by the user
  notificationsCreated  Notification[]  @relation("notificationCreator") // notification created by the user
}

model Post{
  id     String    @id @default(cuid())
  authorid String 
  content  String? 
  image   String?
  createdAt DateTime @default(now())   // member since 2020 
  updatedAt  DateTime   @updatedAt

  //relations 
  author User @relation(fields: [authorid] , references: [id] , onDelete: Cascade) // Cascade delete means delete all post if the author is deleted
  comments  Comment[] 
  likes     Like[]
  notification Notification[]
}

model Comment {
  id              String @id @default(cuid())
  content         String 
  authorId        String 
  postId          String 
  notification    Notification[]
  createdAt       DateTime @default(now())   // member since 2020 

  author User @relation(fields: [authorId] , references: [id] , onDelete: Cascade)
  posts  Post @relation(fields: [postId] , references: [id] , onDelete: Cascade)
  @@index([authorId , postId])  // composite index for faster queries 
}

model Like {
  id       String    @id @default(cuid())
  postId   String    
  userId   String
  createdAt DateTime @default(now())   // member since 2020 

  author User @relation(fields: [userId] , references: [id] , onDelete: Cascade)
  posts  Post @relation(fields: [postId] , references: [id] , onDelete: Cascade)

  @@index([userId , postId])   // composite index for faster queries 
  @@unique([userId , postId])    // the logic over here would be that the same user cannot like the post twice 
}

model Follows {
  followerId String // jo banda follow karra like who is doing the operation
  followingId String  // the person he is following to 
  createdAt DateTime @default(now())   // member since 2020 

  follower User @relation("follower" , fields: [followerId] , references: [id] , onDelete: Cascade)
  following User @relation( "following", fields: [followingId] , references: [id] , onDelete: Cascade)

  @@index([followerId , followingId]) // composite index for faster queries 
  @@id([followerId , followingId])   // `
}

enum NotificationType {
  LIKE 
  COMMENT 
  FOLLOW
}

model Notification {
  id           String   @id @default(cuid())
  userId       String 
  creatorId    String
  type         NotificationType
  read         Boolean  @default(false)
  postId       String?
  commentId    String?
  createdAt    DateTime @default(now())   // member since 2020 


  // relations 
  user     User         @relation("userNotifications" , fields: [userId] , references: [id] , onDelete: Cascade)
  creator  User         @relation("notificationCreator" , fields: [creatorId] , references: [id] , onDelete: Cascade)
  post     Post?        @relation( fields: [postId] , references: [id] , onDelete: Cascade) 
  comment  Comment?     @relation( fields: [commentId] , references: [id] , onDelete: Cascade) 

  @@index([userId , creatorId , createdAt])
}
